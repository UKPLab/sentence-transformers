name: Unit tests

on:
  push:
    branches:
      - master
      - v*-release
  pull_request:
    branches:
      - master
      - v*-release
  workflow_dispatch:

jobs:

  test_sampling:
    name: Run unit tests
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Remove unnecessary files (Linux)
        run: |
          df -h /
          # Remove software and language runtimes we're not using
          sudo rm -rf \
            "$AGENT_TOOLSDIRECTORY" \
            /opt/google/chrome \
            /opt/microsoft/msedge \
            /opt/microsoft/powershell \
            /opt/pipx \
            /usr/lib/mono \
            /usr/local/julia* \
            /usr/local/lib/android \
            /usr/local/lib/node_modules \
            /usr/local/share/chromium \
            /usr/local/share/powershell \
            /usr/share/dotnet \
            /usr/share/swift
          df -h /
        if: runner.os == 'Linux'
      - name: Remove unnecessary files (Windows)
        run: |
          $disk = Get-WmiObject Win32_LogicalDisk -Filter "DeviceID='C:'" | Select-Object Size, FreeSpace
          Write-Host ("{0}GB total" -f [math]::truncate($disk.Size / 1GB))
          Write-Host ("{0}GB free" -f [math]::truncate($disk.FreeSpace / 1GB))

          rmdir /s "C:\Program Files\dotnet"
          rmdir /s "C:\Program Files (x86)\Android\android-sdk"
          rmdir /s "C:\npm"

          $disk = Get-WmiObject Win32_LogicalDisk -Filter "DeviceID='C:'" | Select-Object Size, FreeSpace
          Write-Host ("{0}GB total" -f [math]::truncate($disk.Size / 1GB))
          Write-Host ("{0}GB free" -f [math]::truncate($disk.FreeSpace / 1GB))
        if: runner.os == 'Windows'

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Try to load cached dependencies
        uses: actions/cache@v3
        id: restore-cache
        with:
          path: ${{ env.pythonLocation }}
          key: python-dependencies-${{ matrix.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}-${{ env.pythonLocation }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install '.[dev,train]'

      - name: Run unit tests
        run: |
          python -m pytest --durations 20 -sv tests/
